import CS.CSNode;
import CS.ControlStructures;
import Lexar.LexAnalyzer;
import Lexar.Token;
import Parser.ParseTree;
import Parser.AST;
import cse_machine.CSE;


import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class Main {
    public static void main(String[] args) {

        // 1. Load the file from the command line argument
        if (args.length != 1) {
            System.out.println("Usage: java Main <filename>");
            return;
        }
        File file = new File(args[0]); // for makefile

        // 2. Create an instance of LexAnalyzer with the file
        LexAnalyzer lexicalAnalyzer = new LexAnalyzer(file);
        // Get the list of tokens generated by the lexical analyzer
        ArrayList<Token> tokenList = lexicalAnalyzer.getTokenList();
        // System.out.println("------------------Token List---------------------");
        // for (Token token : tokenList) {
        //     System.out.println(token);
        // }

        // 3. Create an instance of Parser with the token list
        ParseTree parser = new ParseTree(tokenList);

        // 4. Parse the tokens to create an AST
        AST ast = parser.buildAst();
        // System.out.println("-----------------AST----------------------");
        // tree.print(); 

        // 5. Standerdize the AST
        ast.standardize();
        // System.out.println("-------------------ST----------------------");
        // tree.print();

        // 6. Generate the control structures from the AST
        ControlStructures ctrlstruct = new ControlStructures();
        ctrlstruct.genControlStructures(ast.getRoot());
        List<List<CSNode>> deltc_struct = ctrlstruct.getCS();

        // 7. CSE Machine
        CSE cse_m = new CSE(deltc_struct);
        cse_m.runCSE();
        System.out.println();
    }
}